// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique
  email       String     @unique
  password    String
  bio         String?
  headerPhoto String?
  photo       String?
  posts       Post[]
  likes       Like[]
  followers   Follow[]   @relation("UserFollowers")
  followings  Follow[]   @relation("UserFollowings")
  bookmarks   Bookmark[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Follow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  follower    User @relation("UserFollowers", fields: [followerId], references: [id])
  followingId Int
  following   User @relation("UserFollowings", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id        String    @id @default(uuid())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  image     String?
  text      String
  video     String?
  likes     Like[]
  comments  Comment[]
  bookmark  Bookmark?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  image     String?
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Bookmark {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId])
}
